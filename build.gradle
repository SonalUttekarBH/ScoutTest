/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

def getGitHash = { ->
  def stdout = new ByteArrayOutputStream()
  def stderr = new ByteArrayOutputStream()
  def retVal
  try {
    exec {
      ignoreExitValue = true
      commandLine 'git', 'rev-parse', '--short', 'HEAD'
      standardOutput = stdout
      errorOutput = stderr
    }
  } catch(Exception ex) {
    println("Encountered Exception, git hash will not be generated " + ex.getMessage())
  }
  retVal = stdout.toString().trim()
  return retVal.isEmpty() ? "NOHASH" : retVal
}

group 'com.bh.at.'
version "1.0-${getGitHash()}"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

File distFolder = new File('dist')
if (!distFolder.exists()) {
      distFolder.mkdirs()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all" << "-Werror" << "-Xlint:unchecked" << "-Xdiags:verbose"
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs "${distFolder}"
    }
}

dependencies {

    implementation 'com.bh.exception.utils:ExceptionUtils:0.1.0+'
    implementation 'com.bh.at.constutil:ConstantsUtil:0.1.0+'
    implementation 'com.bh.icommonbaseutils:ICommonBaseUtils:0.2.0+'
    implementation 'com.bh.commonbaseutils:CommonBaseUtils:0.2.0+'
    implementation 'com.bh.at.client.uiutil:ClientUiUtil:0.1.0+'
    implementation 'com.bh.at.client.util:ClientUtil:0.1.0+'

    implementation 'io.cucumber:cucumber-junit:6.10.4'
    implementation 'io.cucumber:cucumber-java:6.10.4'
    implementation 'io.cucumber:cucumber-core:6.10.4'

    implementation 'org.slf4j:slf4j-api:1.7.30'

    implementation 'com.bh.at.iuiutils:IUIUtils:0.2.0+' 
    implementation 'com.bh.at.uiutils:UIUtils:0.2.0+' 
    implementation 'com.bh.at.ui:IUiDrivers:0.1.0+' 
    implementation 'io.appium:java-client:7.5.1' 

    runtimeOnly 'com.bh.at.ui:UiDriverFactory:0.1.0+' 
    runtimeOnly 'com.bh.at.ui:UiDrivers:0.1.0+' 
    runtimeOnly 'io.github.bonigarcia:webdrivermanager:4.4.3' 
    runtimeOnly 'com.github.everit-org.json-schema:org.everit.json.schema:1.13.0' 
    runtimeOnly 'org.tinylog:slf4j-tinylog:2.2.1' 
    runtimeOnly 'org.tinylog:tinylog-impl:2.2.1' 
    runtimeOnly 'org.json:json:20210307' 

}

mainClassName = 'com.bh.at.s1scout200.runner.MainRunner'

task copyDependencies(dependsOn: shadowJar, type: Copy) {
    String name = "${rootProject.name}-${version}"
    String finalName = "${name}.jar"
    String allName = "${name}-all.jar"
    from "$buildDir/libs/${allName}"
    into "$distFolder"
    rename(allName, finalName)
    // TODO ideally create a symlink rather than copying
}

task donedone(dependsOn: [copyDependencies], type: GradleBuild) {
}

shadowJar.finalizedBy(donedone)


