/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.step;

import com.bh.at.s1scout200.tester.*;
import io.cucumber.java.en.And;

public class VerifyPlotsSteps {
  private static final VerifyPlotsTester verifyPlotsTester = TesterFactory.getTester("VerifyPlots");
 // private static final BaseTester homeTester=new HomeTester();
 // private BaseTester baseTester = null;
  private static final HomeTester homeTester=new HomeTester();
  private static final SettingTester settingTester=new SettingTester();
  private static final DevicesTester devicesTester=new DevicesTester();
  private static final MeasureTester measureTester=new MeasureTester();
  private static final SensorConfigTester sensorConfigTester=new SensorConfigTester();

  public VerifyPlotsSteps() {
  }

  @And("user navigates Settings Measuring Units")
  public void f42() {
    //verifyPlotsTester.f42();
      System.out.println("LOG INFO-user navigates Settings Measuring Units");
    homeTester.navigateToHomeOptions("Settings");
  }

  @And("user selects {string} in {string}")
  public void f43(String units, String p1) {
    //verifyPlotsTester.f43(units, p1);
      System.out.println("LOG INFO-user selects {string} in {string}");
    settingTester.navigateToSettingOptions(p1);
    settingTester.selectMeasureUnits(units);
    homeTester.mobileBack();
      homeTester.mobileBack();
      homeTester.mobileBack();
      homeTester.mobileBack();
      //homeTester.appBack();

  }

  @And("a new Parameter set with Store Unit {string} and {string}")
  public void f46(String parameterSet, String measurementType) {
    //verifyPlotsTester.f46(parameterSet);
      System.out.println("LOG INFO-a new Parameter set with Store Unit {string} and {string}");
      measureTester.addParamsetwithType(parameterSet,measurementType);
  }

  @And("Change the sensor type to {string}")
  public void f50(String parameterSet) {
    //
      System.out.println("LOG INFO-Change the sensor type to {string}");
      measureTester.navigateToProperty("type");
      measureTester.modifyType(parameterSet);
  }

  @And("navigates back")
  public void f52() {

      System.out.println("LOG INFO-");
      verifyPlotsTester.f52();
  }

  @And("user clicks on Measure on Measure Configuration Screen")
  public void f53() {
    //verifyPlotsTester.f53();
      System.out.println("LOG INFO-user clicks on Measure on Measure Configuration Screen");
      measureTester.clickMeasure();
  }

  @And("user pauses the measurement")
  public void f54() {
      System.out.println("LOG INFO-user pauses the measurement");
    //verifyPlotsTester.f54();
      measureTester.pauseMeasurement();
  }

  @And("user verifies measure units {string} and {string}")
  public void f55(String spectrumUnit, String WaveformUnit) {
      System.out.println("LOG INFO-user verifies measure units {string} and {string}");
    //verifyPlotsTester.f55(spectrumUnit, WaveformUnit);
      measureTester.getUnitsFromGraph(spectrumUnit,WaveformUnit);
  }


}
