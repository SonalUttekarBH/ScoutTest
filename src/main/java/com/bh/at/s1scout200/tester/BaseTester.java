/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.tester;

import com.bh.at.client.uiutil.ClientUiUtil;
import com.bh.at.iuiutils.IBasePage;
import com.bh.at.s1scout200.page.DeviceCompatibilityAlertPage;
import com.bh.at.s1scout200.page.HazardAlertPage;
import com.bh.at.s1scout200.page.LicenseAlertPage;
import com.bh.at.s1scout200.page.S1Scout200Page;
import org.junit.Assert;

public class BaseTester implements ITester {

  protected S1Scout200Page lS1Scout200Page;

  protected HazardAlertPage lHazardAlertPage;

  protected LicenseAlertPage lLicenseAlertPage;

  protected DeviceCompatibilityAlertPage lDeviceCompatibilityAlertPage;

  public void commonInitPage(String uiFile) {
    uiFile = uiFile.split("\\.")[1].split(":")[0].toLowerCase();
    IBasePage appPage = null;
    switch (uiFile) {

      case "s1scout200page":
        appPage = lS1Scout200Page = new S1Scout200Page(ClientUiUtil.getDriverConfig(uiFile));
        break;

      case "hazardalert":
        appPage = lHazardAlertPage = new HazardAlertPage(ClientUiUtil.getDriverConfig(uiFile));
        break;

      case "licensealert":
        appPage = lLicenseAlertPage = new LicenseAlertPage(ClientUiUtil.getDriverConfig(uiFile));
        break;

      case "devicecompatibilityalert":
        appPage = lDeviceCompatibilityAlertPage = new DeviceCompatibilityAlertPage(ClientUiUtil.getDriverConfig(uiFile));
        break;

      default:
        System.out.printf("\n===========> Unhandled page file %s\n", uiFile);
        System.exit(1);
        break;

    }
    // Optionally provide a timeout for init if required, the default is 10 seconds
    appPage.init(/* optional timeoutInSecs default is 10 secs */);
    appPage.collectData();
  }

  public void f57() {
    System.out.println(">>>>> base: Function f57 (the app is launched) not fully implemented");
  }

  public void commonInitPage(String p0, String uiFile) {
    commonInitPage(uiFile);
    lLicenseAlertPage.accept.click();
    System.out.println(">>>>> base: Function commonInitPage (user clicks ACCEPT on license alert page S1Scout200.LicenseAlert:uiJSON) not fully implemented");
  }

  public void commonInitPage1(String p0, String uiFile) {
    commonInitPage(uiFile);
    lHazardAlertPage.ok.click();
    System.out.println(">>>>> base: Function commonInitPage1 (user clicks OK on hazard alert page S1Scout200.HazardAlert:uiJSON) not fully implemented");
  }

  public void commonInitPage2(String p0, String uiFile) {
    commonInitPage(uiFile);
    if(lDeviceCompatibilityAlertPage.ok.elementExists())
    lDeviceCompatibilityAlertPage.ok.click();
    System.out.println(">>>>> base: Function commonInitPage2 (user clicks OK on device compatibility alert page S1Scout200.DeviceCompatibilityAlert:uiJSON) not fully implemented");
  }

  public void f62(String option) {


    System.out.println(">>>>> base: Function f62 (user enables Data Collector Simulator On) not fully implemented");
  }

  public void f63() {
    System.out.println(">>>>> base: Function f63 (user enables simulator on devices) not fully implemented");
  }

  public void f64(String p0) {
    System.out.println(">>>>> base: Function f64 (user navigates to Measure) not fully implemented");
  }

  public void f65(String p0) {
    System.out.println(">>>>> base: Function f65 (Select any continuous data collection measurement Spectrum / Waveform) not fully implemented");
  }

  public void f66() {
    System.out.println(">>>>> base: Function f66 (Add a new sensor) not fully implemented");
  }

  public void f67(String p0) {
    System.out.println(">>>>> base: Function f67 (Select the name property) not fully implemented");
  }

  public void f68(String p0) {
    System.out.println(">>>>> base: Function f68 (Input a name for the sensor and then commit the changes DemoSensor) not fully implemented");
  }

  public void f69(String p0) {
    System.out.println(">>>>> base: Function f69 (Save the sensor configuration CH1) not fully implemented");
  }

  public void f70() {

    lS1Scout200Page.init().collectData();
    lS1Scout200Page.quit();
    System.out.println(">>>>> base: Function f70 (user quits the app) not fully implemented");
  }

  public void commonInitPage3(String uiFile) {
    commonInitPage(uiFile);
  }

  public void customWait(long time)
  {
    try {
      Thread.sleep(time);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}
