/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.runner;

import com.bh.at.client.uiutil.ClientUiUtil;
import com.bh.at.client.util.ClientUtil;
import com.bh.at.s1scout200.tester.ITester;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The AppConfig type.
 */
public final class AppConfig {
  private static final Logger LOG = LoggerFactory.getLogger(AppConfig.class);

  public static final Map<String, ITester> testers = new HashMap<>();

  private AppConfig() {
  }

  /**
   * Utility function to read from the environment parameters
   *
   * @param <T> the type parameter
   * @param key the key
   * @param def the default value
   * @return the requested parameter
   */
  public static <T> T getEnvParam(String key, T def) {
    return ClientUtil.getEnvParam(key, def);
  }

  /**
   * Loads the environment data
   *
   * @param envParamFile the env param file
   */
  static void loadEnv(String envParamFile) {
    if (new File(envParamFile).exists()) {
      ClientUtil.loadEnv(envParamFile);
    } else {
      AppErrorExit(new Exception("Cannot locate the file " + envParamFile));
    }
  }

  /**
   * load the required environment parameters
   */
  static void loadEnvParams() {
  }

  static void setRuntimeParameters(String[] runtimeParam) {
    ClientUtil.setRuntimeParameters(runtimeParam);
  }

  static void initUiDrivers() {
    ClientUiUtil.initUiDrivers(ClientUtil.getEnvironment());
  }

  /**
   * Get cucumber run time param as string [].
   *
   * @param projName     the proj name
   * @param tags         the tags
   * @param reportFolder the report folder
   * @return the parameter string []
   */
  static String[] getCucumberRunTimeParam(String projName, String tags, String reportFolder) {
    return ClientUtil.getCucumberRunTimeParam(projName, tags, reportFolder);
  }

  /**
   * Exit the app after printing the cause
   *
   * @param ex the cause of exit
   */
  static void AppErrorExit(Exception ex) {
    LOG.error("***** Exiting encountered an error *****");
    ex.printStackTrace();
    System.exit(1);
  }
}
