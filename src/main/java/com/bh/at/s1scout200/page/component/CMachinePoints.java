/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IImg;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.at.uiutils.CElements;
import com.bh.at.uiutils.CImg;
import com.bh.icommonbaseutils.IJSONO;

public class CMachinePoints extends CElement {
  private static final IJSONO overallStatCompConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='autosave']\"],\"name\":\"overallStatComp\"}");

  private static final IJSONO cpointsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[starts-with(@test-tag,'routesmachinedetailsview_') and contains(@test-tag,'_schedules_')]\"],\"name\":\"cpoints\"}");

  public IImg overallStatComp;

  public CPoints cpoints;

  public CMachinePoints(IConfig config) {
    super(config);
  }


  @Override
  public CMachinePoints initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    cpoints.init(optTimeoutInSecs);
    overallStatComp.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CMachinePoints collectData() {
    if (elementExists()) {
      super.collectData();
      cpoints.collectData();
      overallStatComp.collectData();
    }

    return this;
  }

  @Override
  protected CMachinePoints createComponents() {
    super.createComponents();
    overallStatComp = uif.getImg(UiHelper.config.createConfig(overallStatCompConfig, this));
    cpoints = new CPoints(UiHelper.config.createConfig(cpointsConfig, this));

    return this;
  }
}
