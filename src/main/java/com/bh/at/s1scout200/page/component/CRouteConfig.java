/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CRouteConfig extends CElement {
  private static final IJSONO alarmsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routesconfig_alarms_navbar']\"],\"name\":\"alarms\"}");

  private static final IJSONO sensorsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routesconfig_sensors_navbar']\"],\"name\":\"sensors\"}");

  private static final IJSONO multiChannelConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routesconfig_multichannel_navbar']\"],\"name\":\"multiChannel\"}");

  private static final IJSONO recordingModeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesSaveMode']\"],\"name\":\"recordingMode\"}");

  private static final IJSONO displayModeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesDisplayMode']\"],\"name\":\"displayMode\"}");

  private static final IJSONO startBtnConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routeconfig_start_button']\"],\"name\":\"startBtn\"}");

  private static final IJSONO resumeBtnConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routeconfig_resume_button']\"],\"name\":\"resumeBtn\"}");

  public IText alarms;

  public IText sensors;

  public IText multiChannel;

  public CRecordingMode recordingMode;

  public CDisplay displayMode;

  public IText startBtn;

  public IText resumeBtn;

  public CRouteConfig(IConfig config) {
    super(config);
  }

  @Override
  public CRouteConfig initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    alarms.init(optTimeoutInSecs);
    sensors.init(optTimeoutInSecs);
    recordingMode.init(optTimeoutInSecs);
    displayMode.init(optTimeoutInSecs);
    startBtn.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CRouteConfig collectData() {
    if (elementExists()) {
      super.collectData();
      alarms.collectData();
      sensors.collectData();
      recordingMode.collectData();
      displayMode.collectData();
      startBtn.collectData();
    }

    return this;
  }

  @Override
  protected CRouteConfig createComponents() {
    super.createComponents();
    alarms = uif.getText(UiHelper.config.createConfig(alarmsConfig, this));
    sensors = uif.getText(UiHelper.config.createConfig(sensorsConfig, this));
    multiChannel = uif.getText(UiHelper.config.createConfig(multiChannelConfig, this));
    recordingMode = new CRecordingMode(UiHelper.config.createConfig(recordingModeConfig, this));
    displayMode = new CDisplay(UiHelper.config.createConfig(displayModeConfig, this));
    startBtn = uif.getText(UiHelper.config.createConfig(startBtnConfig, this));
    resumeBtn = uif.getText(UiHelper.config.createConfig(resumeBtnConfig, this));

    return this;
  }
}
