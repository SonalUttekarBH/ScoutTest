/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CRouteGraph extends CElement {
  private static final IJSONO remeasureConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measuringview_remeasure_button']\"],\"name\":\"remeasure\"}");

  private static final IJSONO nextConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measuringview_next_button']\"],\"name\":\"next\"}");

  public IText remeasure;

  public IText next;

  public CRouteGraph(IConfig config) {
    super(config);
  }

  @Override
  public CRouteGraph initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    remeasure.init(optTimeoutInSecs);
    next.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CRouteGraph collectData() {
    if (elementExists()) {
      super.collectData();
      remeasure.collectData();
      next.collectData();
    }

    return this;
  }

  @Override
  protected CRouteGraph createComponents() {
    super.createComponents();
    remeasure = uif.getText(UiHelper.config.createConfig(remeasureConfig, this));
    next = uif.getText(UiHelper.config.createConfig(nextConfig, this));

    return this;
  }
}
