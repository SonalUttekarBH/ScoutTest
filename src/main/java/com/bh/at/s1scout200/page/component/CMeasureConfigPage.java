/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IButton;
import com.bh.at.iuiutils.ICheckbox;
import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CMeasureConfigPage extends CElement {
  private static final IJSONO paramsetConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_paramset_navbar']\",\"webview\"],\"name\":\"paramset\"}");

  private static final IJSONO sensorsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_sensors_navbar']\"],\"name\":\"sensors\"}");

  private static final IJSONO intervalCaptureModeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='intervalcapturemode_switch']\"],\"name\":\"intervalCaptureMode\"}");

  private static final IJSONO measureConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_startmeasure_button']\"],\"name\":\"measure\"}");

  public IText paramset;

  public IText sensors;

  public ICheckbox intervalCaptureMode;

  public IButton measure;

  public CMeasureConfigPage(IConfig config) {
    super(config);
  }

  @Override
  public CMeasureConfigPage initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    paramset.init(optTimeoutInSecs);
    sensors.init(optTimeoutInSecs);
    intervalCaptureMode.init(optTimeoutInSecs);
    measure.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CMeasureConfigPage collectData() {
    if (elementExists()) {
      super.collectData();
      paramset.collectData();
      sensors.collectData();
      intervalCaptureMode.collectData();
      measure.collectData();
    }

    return this;
  }

  @Override
  protected CMeasureConfigPage createComponents() {
    super.createComponents();
    paramset = uif.getText(UiHelper.config.createConfig(paramsetConfig, this));
    sensors = uif.getText(UiHelper.config.createConfig(sensorsConfig, this));
    intervalCaptureMode = uif.getCheckbox(UiHelper.config.createConfig(intervalCaptureModeConfig, this));
    measure = uif.getButton(UiHelper.config.createConfig(measureConfig, this));

    return this;
  }
}
