/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page;

import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.s1scout200.page.component.*;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CMobilePage;
import com.bh.icommonbaseutils.IJSONO;

public class S1Scout200Page extends CMobilePage {
  private static final IJSONO homeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='mainMenuView']\",\"webview\"],\"name\":\"home\"}");

  private static final IJSONO statusbarConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='statusBar']\",\"webview\"],\"name\":\"statusbar\"}");

  private static final IJSONO settingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='settingsList']\",\"webview\"],\"name\":\"setting\"}");

  private static final IJSONO measurePageConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='measureView']\",\"webview\"],\"name\":\"measure\"}");

  private static final IJSONO simulatorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='simulatorList']\",\"webview\"],\"name\":\"simulator\"}");

  private static final IJSONO dboptnConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='databaseOptionsView']\"],\"name\":\"dboptn\"}");

  private static final IJSONO devicesConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='devicesView']\"],\"name\":\"devices\"}");

  private static final IJSONO dialogConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@class='modal-content']\",\"webview\"],\"name\":\"dialog\"}");

  private static final IJSONO measureConfigConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='measureConfigView']\",\"webview\"],\"name\":\"measureConfig\"}");

  private static final IJSONO sensorSetupConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='channelsView']\",\"webview\"],\"name\":\"sensorSetup\"}");

  private static final IJSONO sensorSelectionConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorsView']\",\"webview\"],\"name\":\"sensorSelection\"}");

  private static final IJSONO addEditSensorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorsSetupView']\",\"webview\"],\"name\":\"addEditSensor\"}");

  private static final IJSONO nameSensorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorNameView']\",\"webview\"],\"name\":\"nameSensor\"}");

  private static final IJSONO typeSensorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorTypeView']\",\"webview\"],\"name\":\"typeSensor\"}");

  private static final IJSONO volRCSensorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorChannelInputView']\",\"webview\"],\"name\":\"volRCSensor\"}");

  private static final IJSONO driveCurrentSensorConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorDriveCurrentView']\",\"webview\"],\"name\":\"driveCurrentSensor\"}");

  private static final IJSONO zeroDCOffConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorDCOffsetView']\"],\"name\":\"zeroDCOff\"}");

  private static final IJSONO senTypeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorTypeView']\"],\"name\":\"senType\"}");

  private static final IJSONO senUnitConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorUintsView']\"],\"name\":\"senUnit\"}");

  private static final IJSONO senSettlingTimeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorSettlingView']\"],\"name\":\"senSettlingTime\"}");

  private static final IJSONO autoSettlingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorAutoSettlingView']\"],\"name\":\"senSettlingTime\"}");

  private static final IJSONO senSensitivityConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensor.Sensitivity']\"],\"name\":\"senSensitivity\"}");

  private static final IJSONO unitsViewConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='settingsUnitsView']\"],\"name\":\"unitsView\"}");

  private static final IJSONO unitsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='settingsUnitsetView']\"],\"name\":\"units\"}");

  private static final IJSONO addEditParamsetConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='sensorsSetupView']\"],\"name\":\"addEditParamset\"}");

  private static final IJSONO paramsetSelectionConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='measureParamsetsView']\"],\"name\":\"units\"}");

  private static final IJSONO storeunitConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='paramsetStoreUnitView']\"],\"name\":\"storeunit\"}");

  private static final IJSONO typeStoreunitConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='paramsetTypeView']\"],\"name\":\"typeStoreunit\"}");

  private static final IJSONO measureGraphConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='measuringView']\"],\"name\":\"measureGraph\"}");

  private static final IJSONO syncSelectionConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='syncView']\",\"webview\"],\"name\":\"syncSelection\"}");

  private static final IJSONO loadFileConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='loadFileModeView']\",\"webview\"],\"name\":\"loadFile\"}");

  private static final IJSONO androidFileSelectConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@resource-id='android:id/content']\",\"native\"],\"name\":\"androidFileSelect\"}");

  private static final IJSONO routeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesView']\",\"webview\"],\"name\":\"route\"}");

  private static final IJSONO enterpriseListsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesSitesView']\",\"webview\"],\"name\":\"enterpriseLists\"}");

  private static final IJSONO folderListsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesFoldersView']\",\"webview\"],\"name\":\"folderLists\"}");

  private static final IJSONO routeConfigViewConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesConfigView']\",\"webview\"],\"name\":\"routeConfig\"}");
 private static final IJSONO routeMeasurementConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='routesMachineDetailsView']\",\"webview\"],\"name\":\"routeMeasurement\"}");

  private static final IJSONO routeDialogConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='routesmachinedetailsview_preview_modal']\",\"webview\"],\"name\":\"routeDialog\"}");

  private static final IJSONO routegraphConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='measuringView']\",\"webview\"],\"name\":\"routegraph\"}");

  public CHomePage home;

  public CStatusBarPage statusbar;

  public CSettingsPage setting;

  public CMeasurePage measure;

  public CSimulatorPage simulator;

  public CDBOptionsPage dboptn;

  public CDevicesPage devices;

  public CDialogPage dialog;

  public CMeasureConfigPage measureConfig;

  public CSensorSetupPage sensorSetup;

  public CSensorSelectionPage sensorSelection;

  public CAddEditSensorPage addEditSensor;

  public CNameSensor nameSensor;

  public CTypeSensor typeSensor;

  public CVolRCSensor volRCSensor;

  public CdriveCurrentSensor driveCurrentSensor;

  public CZeroDCOffset zeroDCOff;

  public CSensorType senType;

  public CSensorUnit senUnit;

  public CSensorSettlingTime senSettlingTime;

  public CSensorAutoSettling autoSettling;

  public CSensorSensitivity senSensitivity;

  public CMeasurinUnitPage unitsView;

  public CunitSet units;

  public CAddEditParamsetPage addEditParamset;

  public CParamsetSelectionPage paramsetSelection;

  public CStoreUnitParamset storeunit;

  public CTypeParamset typeStoreunit;

  public CMeasureGraph measureGraph;

  public CSyncSelection syncSelection;

  public CLoadFile loadFile;

  public CFileSelect androidFileSelect;

  public CRoutePage route;

  public CREnterprisePage enterpriseLists;

  public CRFolderPage folderLists;

  public CRouteConfig routeConfigView;
 public CRouteMeasurement routeMeasurement;

  public CRouteDialog routeDialog;

  public CRouteGraph routegraph;

  public S1Scout200Page(IJSONO uiDriverCaps) {
    super(uiDriverCaps);
  }

  @Override
  public void quit() {
    super.quit();
  }

  @Override
  public S1Scout200Page init(int... optTimeoutInSecs) {
    super.init(optTimeoutInSecs);

    return this;
  }

  @Override
  protected S1Scout200Page createComponents() {
    super.createComponents();
    home = new CHomePage(UiHelper.config.createConfig(homeConfig, this));
    statusbar = new CStatusBarPage(UiHelper.config.createConfig(statusbarConfig, this));
    setting = new CSettingsPage(UiHelper.config.createConfig(settingConfig, this));
    measure = new CMeasurePage(UiHelper.config.createConfig(measurePageConfig, this));
    simulator = new CSimulatorPage(UiHelper.config.createConfig(simulatorConfig, this));
    dboptn = new CDBOptionsPage(UiHelper.config.createConfig(dboptnConfig, this));
    devices = new CDevicesPage(UiHelper.config.createConfig(devicesConfig, this));
    dialog = new CDialogPage(UiHelper.config.createConfig(dialogConfig, this));
    measureConfig = new CMeasureConfigPage(UiHelper.config.createConfig(measureConfigConfig, this));
    sensorSetup = new CSensorSetupPage(UiHelper.config.createConfig(sensorSetupConfig, this));
    sensorSelection = new CSensorSelectionPage(UiHelper.config.createConfig(sensorSelectionConfig, this));
    addEditSensor = new CAddEditSensorPage(UiHelper.config.createConfig(addEditSensorConfig, this));
    nameSensor = new CNameSensor(UiHelper.config.createConfig(nameSensorConfig, this));
    typeSensor = new CTypeSensor(UiHelper.config.createConfig(typeSensorConfig, this));
    volRCSensor = new CVolRCSensor(UiHelper.config.createConfig(volRCSensorConfig, this));
    driveCurrentSensor = new CdriveCurrentSensor(UiHelper.config.createConfig(driveCurrentSensorConfig, this));
    zeroDCOff = new CZeroDCOffset(UiHelper.config.createConfig(zeroDCOffConfig, this));
    senType = new CSensorType(UiHelper.config.createConfig(senTypeConfig, this));
    senUnit = new CSensorUnit(UiHelper.config.createConfig(senUnitConfig, this));
    senSettlingTime = new CSensorSettlingTime(UiHelper.config.createConfig(senSettlingTimeConfig, this));
    autoSettling = new CSensorAutoSettling(UiHelper.config.createConfig(autoSettlingConfig, this));
    senSensitivity = new CSensorSensitivity(UiHelper.config.createConfig(senSensitivityConfig, this));
    unitsView = new CMeasurinUnitPage(UiHelper.config.createConfig(unitsViewConfig, this));
    units = new CunitSet(UiHelper.config.createConfig(unitsConfig, this));
    addEditParamset = new CAddEditParamsetPage(UiHelper.config.createConfig(addEditParamsetConfig, this));
   paramsetSelection = new CParamsetSelectionPage(UiHelper.config.createConfig(paramsetSelectionConfig, this));
    storeunit = new CStoreUnitParamset(UiHelper.config.createConfig(storeunitConfig, this));
    typeStoreunit = new CTypeParamset(UiHelper.config.createConfig(typeStoreunitConfig, this));
    measureGraph = new CMeasureGraph(UiHelper.config.createConfig(measureGraphConfig, this));
    syncSelection = new CSyncSelection(UiHelper.config.createConfig(syncSelectionConfig, this));
    loadFile = new CLoadFile(UiHelper.config.createConfig(loadFileConfig, this));
    androidFileSelect = new CFileSelect(UiHelper.config.createConfig(androidFileSelectConfig, this));
    route = new CRoutePage(UiHelper.config.createConfig(routeConfig, this));
    enterpriseLists = new CREnterprisePage(UiHelper.config.createConfig(enterpriseListsConfig, this));
    folderLists = new CRFolderPage(UiHelper.config.createConfig(folderListsConfig, this));
    routeConfigView = new CRouteConfig(UiHelper.config.createConfig(routeConfigViewConfig, this));
	routeMeasurement = new CRouteMeasurement(UiHelper.config.createConfig(routeMeasurementConfig, this));
    routeDialog = new CRouteDialog(UiHelper.config.createConfig(routeDialogConfig, this));
    routegraph = new CRouteGraph(UiHelper.config.createConfig(routegraphConfig, this));

    return this;
  }
}
