/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CRecordingMode extends CElement {
  private static final IJSONO quickRecordingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='quick']\",\"webview\"],\"name\":\"quickRecording\"}");

  private static final IJSONO autoRecordingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='auto']\",\"webview\"],\"name\":\"autoRecording\"}");

  private static final IJSONO manualRecordingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='manual']\",\"webview\"],\"name\":\"manualRecording\"}");

  private static final IJSONO incrementValConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='decrement']\",\"webview\"],\"name\":\"incrementVal\"}");

  private static final IJSONO decrementValConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@id='increment']\",\"webview\"],\"name\":\"decrementVal\"}");

  private static final IJSONO delayFConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@class='delay-field theme-forecolor theme-delay-field ng-binding']\",\"webview\"],\"name\":\"delayF\"}");

  public IText quickRecording;

  public IText autoRecording;

  public IText manualRecording;

  public IText incrementVal;

  public IText decrementVal;

  public IText delayF;

  public CRecordingMode(IConfig config) {
    super(config);
  }

  @Override
  public CRecordingMode initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    quickRecording.init(optTimeoutInSecs);
    autoRecording.init(optTimeoutInSecs);
    manualRecording.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CRecordingMode collectData() {
    if (elementExists()) {
      super.collectData();
      quickRecording.collectData();
      autoRecording.collectData();
      manualRecording.collectData();
    }

    return this;
  }

  @Override
  protected CRecordingMode createComponents() {
    super.createComponents();
    quickRecording = uif.getText(UiHelper.config.createConfig(quickRecordingConfig, this));
    autoRecording = uif.getText(UiHelper.config.createConfig(autoRecordingConfig, this));
    manualRecording = uif.getText(UiHelper.config.createConfig(manualRecordingConfig, this));
    incrementVal = uif.getText(UiHelper.config.createConfig(incrementValConfig, this));
    decrementVal = uif.getText(UiHelper.config.createConfig(decrementValConfig, this));
    delayF = uif.getText(UiHelper.config.createConfig(delayFConfig, this));

    return this;
  }
}
