/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CHomePage extends CElement {
  private static final IJSONO routesConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_routes_button']\",\"webview\"],\"name\":\"routes\"}");

  private static final IJSONO measureConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_measure_button']\"],\"name\":\"measure\"}");

  private static final IJSONO syncConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_sync_button']\"],\"name\":\"sync\"}");

  private static final IJSONO recordReviewConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_review_button']\"],\"name\":\"recordReview\"}");

  private static final IJSONO balancingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_sync_button']\"],\"name\":\"balancing\"}");

  private static final IJSONO devicesConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_devices_button']\"],\"name\":\"devices\"}");

  private static final IJSONO settingsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='home_settings_button']\"],\"name\":\"settings\"}");

  public IText routes;

  public IText measure;

  public IText sync;

  public IText recordReview;

  public IText balancing;

  public IText devices;

  public IText settings;

  public CHomePage(IConfig config) {
    super(config);
  }

  @Override
  public CHomePage initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    routes.init(optTimeoutInSecs);
    measure.init(optTimeoutInSecs);
    sync.init(optTimeoutInSecs);
    recordReview.init(optTimeoutInSecs);
    balancing.init(optTimeoutInSecs);
    devices.init(optTimeoutInSecs);
    settings.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CHomePage collectData() {
    if (elementExists()) {
      super.collectData();
      routes.collectData();
      measure.collectData();
      sync.collectData();
      recordReview.collectData();
      balancing.collectData();
      devices.collectData();
      settings.collectData();
    }

    return this;
  }

  @Override
  protected CHomePage createComponents() {
    super.createComponents();
    routes = uif.getText(UiHelper.config.createConfig(routesConfig, this));
    measure = uif.getText(UiHelper.config.createConfig(measureConfig, this));
    sync = uif.getText(UiHelper.config.createConfig(syncConfig, this));
    recordReview = uif.getText(UiHelper.config.createConfig(recordReviewConfig, this));
    balancing = uif.getText(UiHelper.config.createConfig(balancingConfig, this));
    devices = uif.getText(UiHelper.config.createConfig(devicesConfig, this));
    settings = uif.getText(UiHelper.config.createConfig(settingsConfig, this));

    return this;
  }
}
