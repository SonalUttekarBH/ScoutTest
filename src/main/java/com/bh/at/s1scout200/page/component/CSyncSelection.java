/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CSyncSelection extends CElement {
  private static final IJSONO usbConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_USB_listitem']\",\"webview\"],\"name\":\"usb\"}");

  private static final IJSONO wifiConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_Wi-Fi_listitem']\",\"webview\"],\"name\":\"wifi\"}");

  private static final IJSONO loadFileConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_load_button']\",\"webview\"],\"name\":\"loadFile\"}");

  private static final IJSONO saveFileConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_save_button']\",\"webview\"],\"name\":\"saveFile\"}");

  private static final IJSONO addServerConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_add_button']\",\"webview\"],\"name\":\"addServer\"}");

  private static final IJSONO editModeConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='sync_editmode_button']\",\"webview\"],\"name\":\"editMode\"}");

  public IText usb;

  public IText wifi;

  public IText loadFile;

  public IText saveFile;

  public IText addServer;

  public IText editMode;

  public CSyncSelection(IConfig config) {
    super(config);
  }

  @Override
  public CSyncSelection initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    usb.init(optTimeoutInSecs);
    wifi.init(optTimeoutInSecs);
    loadFile.init(optTimeoutInSecs);
    saveFile.init(optTimeoutInSecs);
    addServer.init(optTimeoutInSecs);
    editMode.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CSyncSelection collectData() {
    if (elementExists()) {
      super.collectData();
      usb.collectData();
      wifi.collectData();
      loadFile.collectData();
      saveFile.collectData();
      addServer.collectData();
      editMode.collectData();
    }

    return this;
  }

  @Override
  protected CSyncSelection createComponents() {
    super.createComponents();
    usb = uif.getText(UiHelper.config.createConfig(usbConfig, this));
    wifi = uif.getText(UiHelper.config.createConfig(wifiConfig, this));
    loadFile = uif.getText(UiHelper.config.createConfig(loadFileConfig, this));
    saveFile = uif.getText(UiHelper.config.createConfig(saveFileConfig, this));
    addServer = uif.getText(UiHelper.config.createConfig(addServerConfig, this));
    editMode = uif.getText(UiHelper.config.createConfig(editModeConfig, this));

    return this;
  }
}
