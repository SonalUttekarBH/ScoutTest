/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

   /* ** AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! ** */

package com.bh.at.s1scout200.page.component;

import static com.bh.at.uiutils.UIUtilsFactory.uif;
import static com.bh.commonbaseutils.CommonBaseFactory.cbf;

import com.bh.at.iuiutils.IConfig;
import com.bh.at.iuiutils.IText;
import com.bh.at.s1scout200.tester.UiHelper;
import com.bh.at.uiutils.CElement;
import com.bh.icommonbaseutils.IJSONO;

public class CMeasurePage extends CElement {
  private static final IJSONO spectrumWfmConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Spectrum / Waveform_navbar']\",\"webview\"],\"name\":\"spectrumWfm\"}");

  private static final IJSONO demodulationConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Demodulation_navbar']\"],\"name\":\"demodulation\"}");

  private static final IJSONO pack6RecConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_6Pack Recordings™_navbar']\"],\"name\":\"pack6Rec\"}");

  private static final IJSONO timeSyncAveragingConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Time Synchronous Averaging_navbar']\"],\"name\":\"timeSyncAveraging\"}");

  private static final IJSONO bumpTestConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Bump Test_navbar']\"],\"name\":\"bumpTest\"}");

  private static final IJSONO keypadConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Keypad_navbar']\"],\"name\":\"keypad\"}");

  private static final IJSONO tachConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Tach_navbar']\"],\"name\":\"tach\"}");

  private static final IJSONO tachDiagnosticsConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Tach Diagnostics_navbar']\"],\"name\":\"tachDiagnostics\"}");

  private static final IJSONO cableTestConfig = cbf.getJSONOFromString("{\"loc\":[\"xpath\",\"//*[@test-tag='measure_Cable Test_navbar']\"],\"name\":\"cableTest\"}");

  public IText spectrumWfm;

  public IText demodulation;

  public IText pack6Rec;

  public IText timeSyncAveraging;

  public IText bumpTest;

  public IText keypad;

  public IText tach;

  public IText tachDiagnostics;

  public IText cableTest;

  public CMeasurePage(IConfig config) {
    super(config);
  }

  @Override
  public CMeasurePage initComponents(int... optTimeoutInSecs) {
    super.initComponents(optTimeoutInSecs);
    spectrumWfm.init(optTimeoutInSecs);
    demodulation.init(optTimeoutInSecs);
    pack6Rec.init(optTimeoutInSecs);
    timeSyncAveraging.init(optTimeoutInSecs);
    bumpTest.init(optTimeoutInSecs);
    keypad.init(optTimeoutInSecs);
    tach.init(optTimeoutInSecs);
    tachDiagnostics.init(optTimeoutInSecs);
    cableTest.init(optTimeoutInSecs);

    return this;
  }

  @Override
  public CMeasurePage collectData() {
    if (elementExists()) {
      super.collectData();
      spectrumWfm.collectData();
      demodulation.collectData();
      pack6Rec.collectData();
      timeSyncAveraging.collectData();
      bumpTest.collectData();
      keypad.collectData();
      tach.collectData();
      tachDiagnostics.collectData();
      cableTest.collectData();
    }

    return this;
  }

  @Override
  protected CMeasurePage createComponents() {
    super.createComponents();
    spectrumWfm = uif.getText(UiHelper.config.createConfig(spectrumWfmConfig, this));
    demodulation = uif.getText(UiHelper.config.createConfig(demodulationConfig, this));
    pack6Rec = uif.getText(UiHelper.config.createConfig(pack6RecConfig, this));
    timeSyncAveraging = uif.getText(UiHelper.config.createConfig(timeSyncAveragingConfig, this));
    bumpTest = uif.getText(UiHelper.config.createConfig(bumpTestConfig, this));
    keypad = uif.getText(UiHelper.config.createConfig(keypadConfig, this));
    tach = uif.getText(UiHelper.config.createConfig(tachConfig, this));
    tachDiagnostics = uif.getText(UiHelper.config.createConfig(tachDiagnosticsConfig, this));
    cableTest = uif.getText(UiHelper.config.createConfig(cableTestConfig, this));

    return this;
  }
}
